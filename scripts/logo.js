import GyroNorm from '../../../../node_modules/gyronorm/dist/gyronorm.complete.min';

const mesh_extrusion = new Float32Array([-0.620946, -0.348047, -0.000090, -0.844132, -0.348047, -0.000090, -0.844132, 0.346373, -0.000090, -0.844132, 0.346373, -0.000090, -0.499899, 0.346373, -0.000090, -0.264299, -0.082134, -0.000090, -0.264299, -0.082134, -0.000090, -0.029650, 0.346373, -0.000090, 0.312162, 0.346373, -0.000090, 0.312162, 0.346373, -0.000090, 0.312162, -0.348047, -0.000090, 0.086410, -0.348047, -0.000090, 0.095451, 0.128667, -0.000090, -0.178232, -0.348047, -0.000090, -0.356268, -0.348047, -0.000090, 0.312162, 0.346373, -0.000090, 0.086410, -0.348047, -0.000090, 0.095451, 0.128667, -0.000090, -0.264299, -0.082134, -0.000090, 0.312162, 0.346373, -0.000090, 0.095451, 0.128667, -0.000090, -0.625915, 0.128757, -0.000090, -0.620946, -0.348047, -0.000090, -0.844132, 0.346373, -0.000090, -0.264299, -0.082134, -0.000090, 0.095451, 0.128667, -0.000090, -0.356268, -0.348047, -0.000090, -0.625915, 0.128757, -0.000090, -0.844132, 0.346373, -0.000090, -0.264299, -0.082134, -0.000090, -0.264299, -0.082134, -0.000090, -0.356268, -0.348047, -0.000090, -0.625915, 0.128757, -0.000090, 0.353778, -0.348029, -0.000090, 0.744561, 0.346373, -0.000090, 1.032845, 0.346373, -0.000090, 1.032845, 0.346373, -0.000090, 1.137331, 0.155493, -0.000090, 0.886075, 0.162779, -0.000090, 0.886075, 0.162779, -0.000090, 0.826689, 0.058885, -0.000090, 0.353778, -0.348029, -0.000090, 1.032845, 0.346373, -0.000090, 0.886075, 0.162779, -0.000090, 0.353778, -0.348029, -0.000090, 1.467362, 0.154672, -0.000090, 1.169983, 0.154672, -0.000090, 1.995138, 0.154672, -0.000090, 1.697741, 0.154672, -0.000090, 1.467362, 0.154672, -0.000090, 1.995138, 0.154672, -0.000090, -1.969501, -0.069777, -0.000090, -1.972618, -0.173883, -0.000090, -1.988544, -0.240407, -0.000090, -1.988544, -0.240407, -0.000090, -2.003624, -0.270094, -0.000090, -2.024672, -0.296359, -0.000090, -2.024672, -0.296359, -0.000090, -2.057029, -0.320044, -0.000090, -2.080747, -0.329695, -0.000090, -2.080747, -0.329695, -0.000090, -2.172292, -0.346702, -0.000090, -2.660144, -0.342339, -0.000090, -2.660144, -0.342339, -0.000090, -2.733219, -0.319657, -0.000090, -2.773077, -0.288653, -0.000090, -2.773077, -0.288653, -0.000090, -2.814580, -0.234033, -0.000090, -2.829242, -0.196717, -0.000090, -2.829242, -0.196717, -0.000090, -2.843618, -0.121516, -0.000090, -2.838819, 0.155748, -0.000090, -2.838819, 0.155748, -0.000090, -2.823834, 0.215437, -0.000090, -2.794378, 0.267778, -0.000090, -2.794378, 0.267778, -0.000090, -2.765589, 0.295211, -0.000090, -2.724413, 0.319409, -0.000090, -2.724413, 0.319409, -0.000090, -2.630515, 0.343027, -0.000090, -2.115518, 0.334405, -0.000090, -2.115518, 0.334405, -0.000090, -2.072165, 0.321415, -0.000090, -2.040495, 0.299422, -0.000090, -2.040495, 0.299422, -0.000090, -2.015717, 0.268873, -0.000090, -1.985468, 0.190498, -0.000090, -1.985468, 0.190498, -0.000090, -1.978022, 0.085715, -0.000090, -2.196311, 0.085715, -0.000090, -1.985468, 0.190498, -0.000090, -2.196311, 0.085715, -0.000090, -2.207947, 0.134040, -0.000090, -2.115518, 0.334405, -0.000090, -2.040495, 0.299422, -0.000090, -1.985468, 0.190498, -0.000090, -2.794378, 0.267778, -0.000090, -2.724413, 0.319409, -0.000090, -2.115518, 0.334405, -0.000090, -2.829242, -0.196717, -0.000090, -2.838819, 0.155748, -0.000090, -2.794378, 0.267778, -0.000090, -2.660144, -0.342339, -0.000090, -2.773077, -0.288653, -0.000090, -2.829242, -0.196717, -0.000090, -2.024672, -0.296359, -0.000090, -2.080747, -0.329695, -0.000090, -2.660144, -0.342339, -0.000090, -1.969501, -0.069777, -0.000090, -1.988544, -0.240407, -0.000090, -2.024672, -0.296359, -0.000090, -2.196341, -0.116732, -0.000090, -2.190643, -0.069777, -0.000090, -1.969501, -0.069777, -0.000090, -2.203065, -0.136493, -0.000090, -2.196341, -0.116732, -0.000090, -1.969501, -0.069777, -0.000090, -1.969501, -0.069777, -0.000090, -2.024672, -0.296359, -0.000090, -2.660144, -0.342339, -0.000090, -2.660144, -0.342339, -0.000090, -2.829242, -0.196717, -0.000090, -2.794378, 0.267778, -0.000090, -2.794378, 0.267778, -0.000090, -2.115518, 0.334405, -0.000090, -1.985468, 0.190498, -0.000090, -1.985468, 0.190498, -0.000090, -2.207947, 0.134040, -0.000090, -2.217598, 0.147691, -0.000090, -1.985468, 0.190498, -0.000090, -2.217598, 0.147691, -0.000090, -2.230427, 0.157137, -0.000090, -2.207703, -0.143898, -0.000090, -2.203065, -0.136493, -0.000090, -1.969501, -0.069777, -0.000090, -2.213172, -0.149869, -0.000090, -2.207703, -0.143898, -0.000090, -1.969501, -0.069777, -0.000090, -1.985468, 0.190498, -0.000090, -2.230427, 0.157137, -0.000090, -2.253638, 0.166953, -0.000090, -1.985468, 0.190498, -0.000090, -2.253638, 0.166953, -0.000090, -2.550087, 0.164851, -0.000090, -2.226547, -0.158165, -0.000090, -2.213172, -0.149869, -0.000090, -1.969501, -0.069777, -0.000090, -2.226547, -0.158165, -0.000090, -1.969501, -0.069777, -0.000090, -2.660144, -0.342339, -0.000090, -2.794378, 0.267778, -0.000090, -1.985468, 0.190498, -0.000090, -2.550087, 0.164851, -0.000090, -2.794378, 0.267778, -0.000090, -2.550087, 0.164851, -0.000090, -2.564546, 0.161168, -0.000090, -2.243073, -0.162682, -0.000090, -2.226547, -0.158165, -0.000090, -2.660144, -0.342339, -0.000090, -2.550787, -0.162686, -0.000090, -2.243073, -0.162682, -0.000090, -2.660144, -0.342339, -0.000090, -2.794378, 0.267778, -0.000090, -2.564546, 0.161168, -0.000090, -2.582925, 0.150763, -0.000090, -2.794378, 0.267778, -0.000090, -2.582925, 0.150763, -0.000090, -2.592369, 0.141811, -0.000090, -2.579758, -0.151314, -0.000090, -2.550787, -0.162686, -0.000090, -2.660144, -0.342339, -0.000090, -2.593731, -0.141425, -0.000090, -2.579758, -0.151314, -0.000090, -2.660144, -0.342339, -0.000090, -2.794378, 0.267778, -0.000090, -2.592369, 0.141811, -0.000090, -2.604900, 0.123866, -0.000090, -2.794378, 0.267778, -0.000090, -2.604900, 0.123866, -0.000090, -2.612861, 0.106340, -0.000090, -2.597832, -0.137237, -0.000090, -2.593731, -0.141425, -0.000090, -2.660144, -0.342339, -0.000090, -2.610097, -0.114556, -0.000090, -2.597832, -0.137237, -0.000090, -2.660144, -0.342339, -0.000090, -2.794378, 0.267778, -0.000090, -2.612861, 0.106340, -0.000090, -2.617733, 0.084818, -0.000090, -2.618108, -0.079760, -0.000090, -2.610097, -0.114556, -0.000090, -2.660144, -0.342339, -0.000090, -2.794378, 0.267778, -0.000090, -2.617733, 0.084818, -0.000090, -2.618108, -0.079760, -0.000090, -2.660144, -0.342339, -0.000090, -2.794378, 0.267778, -0.000090, -2.618108, -0.079760, -0.000090, -1.888187, -0.348029, -0.000090, -1.888187, 0.346391, -0.000090, -1.657790, 0.346391, -0.000090, -1.657790, -0.156346, -0.000090, -1.198017, -0.156346, -0.000090, -1.198017, -0.348029, -0.000090, -1.888187, -0.348029, -0.000090, -1.657790, 0.346391, -0.000090, -1.657790, -0.156346, -0.000090, -1.888187, -0.348029, -0.000090, -1.657790, -0.156346, -0.000090, -1.198017, -0.348029, -0.000090, 1.995138, 0.346373, -0.000090, 1.995138, 0.154672, -0.000090, 1.169983, 0.154672, -0.000090, 1.995138, 0.346373, -0.000090, 1.169983, 0.154672, -0.000090, 1.169983, 0.346373, -0.000090, -1.151593, -0.348047, -0.000090, -1.151593, 0.346373, -0.000090, -0.921195, 0.346373, -0.000090, -1.151593, -0.348047, -0.000090, -0.921195, 0.346373, -0.000090, -0.921195, -0.348047, -0.000090, 2.065868, 0.346373, -0.000090, 2.832833, 0.346373, -0.000090, 2.832833, 0.153453, -0.000090, 2.065868, 0.346373, -0.000090, 2.832833, 0.153453, -0.000090, 2.293324, 0.153453, -0.000090, 2.839667, -0.154786, -0.000090, 2.839667, -0.348029, -0.000090, 2.065868, -0.348029, -0.000090, 2.293324, -0.154786, -0.000090, 2.839667, -0.154786, -0.000090, 2.065868, -0.348029, -0.000090, 2.065868, -0.348029, -0.000090, 2.065868, 0.346373, -0.000090, 2.293324, 0.153453, -0.000090, 2.293324, 0.096314, -0.000090, 2.802499, 0.096314, -0.000090, 2.802499, -0.097970, -0.000090, 2.065868, -0.348029, -0.000090, 2.293324, 0.153453, -0.000090, 2.293324, 0.096314, -0.000090, 2.293324, -0.097970, -0.000090, 2.293324, -0.154786, -0.000090, 2.065868, -0.348029, -0.000090, 2.293324, 0.096314, -0.000090, 2.802499, -0.097970, -0.000090, 2.293324, -0.097970, -0.000090, 2.293324, 0.096314, -0.000090, 2.293324, -0.097970, -0.000090, 2.065868, -0.348029, -0.000090, 1.467362, -0.348047, -0.000090, 1.467362, 0.154672, -0.000090, 1.697741, 0.154672, -0.000090, 1.467362, -0.348047, -0.000090, 1.697741, 0.154672, -0.000090, 1.697741, -0.348047, -0.000090, 1.007732, -0.045009, -0.000090, 0.886075, 0.162779, -0.000090, 1.137331, 0.155493, -0.000090, 1.137331, 0.155493, -0.000090, 1.412955, -0.348029, -0.000090, 1.160260, -0.348029, -0.000090, 1.137331, 0.155493, -0.000090, 1.160260, -0.348029, -0.000090, 1.093763, -0.228712, -0.000090, 1.007732, -0.045009, -0.000090, 1.137331, 0.155493, -0.000090, 1.093763, -0.228712, -0.000090, 0.678800, -0.228712, -0.000090, 0.614707, -0.348029, -0.000090, 0.353778, -0.348029, -0.000090, 1.007732, -0.045009, -0.000090, 1.093763, -0.228712, -0.000090, 0.678800, -0.228712, -0.000090, 0.353778, -0.348029, -0.000090, 0.826689, 0.058885, -0.000090, 0.767289, -0.045009, -0.000090, 0.767289, -0.045009, -0.000090, 1.007732, -0.045009, -0.000090, 0.678800, -0.228712, -0.000090, 0.767289, -0.045009, -0.000090, 0.678800, -0.228712, -0.000090, 0.353778, -0.348029, -0.000090, -0.844132, 0.346373, -0.892916, -0.844132, -0.348047, -0.892916, -0.620946, -0.348047, -0.892916, -0.625915, 0.128757, -0.892916, -0.356268, -0.348047, -0.892916, -0.178232, -0.348047, -0.892916, -0.844132, 0.346373, -0.892916, -0.620946, -0.348047, -0.892916, -0.625915, 0.128757, -0.892916, -0.264299, -0.082134, -0.892916, -0.499899, 0.346373, -0.892916, -0.844132, 0.346373, -0.892916, 0.312162, 0.346373, -0.892916, -0.029650, 0.346373, -0.892916, -0.264299, -0.082134, -0.892916, 0.086410, -0.348047, -0.892916, 0.312162, -0.348047, -0.892916, 0.312162, 0.346373, -0.892916, 0.095451, 0.128667, -0.892916, 0.086410, -0.348047, -0.892916, 0.312162, 0.346373, -0.892916, -0.264299, -0.082134, -0.892916, -0.844132, 0.346373, -0.892916, -0.625915, 0.128757, -0.892916, 0.095451, 0.128667, -0.892916, 0.312162, 0.346373, -0.892916, -0.264299, -0.082134, -0.892916, -0.264299, -0.082134, -0.892916, -0.625915, 0.128757, -0.892916, -0.178232, -0.348047, -0.892916, -0.178232, -0.348047, -0.892916, 0.095451, 0.128667, -0.892916, -0.264299, -0.082134, -0.892916, 1.032845, 0.346373, -0.892916, 0.744561, 0.346373, -0.892916, 0.353778, -0.348029, -0.892916, 0.353778, -0.348029, -0.892916, 0.826689, 0.058885, -0.892916, 0.886075, 0.162779, -0.892916, 0.886075, 0.162779, -0.892916, 1.137331, 0.155493, -0.892916, 1.032845, 0.346373, -0.892916, 0.353778, -0.348029, -0.892916, 0.886075, 0.162779, -0.892916, 1.032845, 0.346373, -0.892916, 1.467362, 0.154672, -0.892916, 1.995138, 0.154672, -0.892916, 1.169983, 0.154672, -0.892916, 1.697741, 0.154672, -0.892916, 1.995138, 0.154672, -0.892916, 1.467362, 0.154672, -0.892916, -1.988544, -0.240407, -0.892916, -1.972618, -0.173883, -0.892916, -1.969501, -0.069777, -0.892916, -1.969501, -0.069777, -0.892916, -2.190643, -0.069777, -0.892916, -2.196341, -0.116732, -0.892916, -1.969501, -0.069777, -0.892916, -2.196341, -0.116732, -0.892916, -2.203065, -0.136493, -0.892916, -2.003624, -0.270094, -0.892916, -1.988544, -0.240407, -0.892916, -1.969501, -0.069777, -0.892916, -2.057029, -0.320044, -0.892916, -2.024672, -0.296359, -0.892916, -2.003624, -0.270094, -0.892916, -2.172292, -0.346702, -0.892916, -2.080747, -0.329695, -0.892916, -2.057029, -0.320044, -0.892916, -2.733219, -0.319657, -0.892916, -2.660144, -0.342339, -0.892916, -2.172292, -0.346702, -0.892916, -2.814580, -0.234033, -0.892916, -2.773077, -0.288653, -0.892916, -2.733219, -0.319657, -0.892916, -2.843618, -0.121516, -0.892916, -2.829242, -0.196717, -0.892916, -2.814580, -0.234033, -0.892916, -2.823834, 0.215437, -0.892916, -2.838819, 0.155748, -0.892916, -2.843618, -0.121516, -0.892916, -2.765589, 0.295211, -0.892916, -2.794378, 0.267778, -0.892916, -2.823834, 0.215437, -0.892916, -2.630515, 0.343027, -0.892916, -2.724413, 0.319409, -0.892916, -2.765589, 0.295211, -0.892916, -2.072165, 0.321415, -0.892916, -2.115518, 0.334405, -0.892916, -2.630515, 0.343027, -0.892916, -2.015717, 0.268873, -0.892916, -2.040495, 0.299422, -0.892916, -2.072165, 0.321415, -0.892916, -1.978022, 0.085715, -0.892916, -1.985468, 0.190498, -0.892916, -2.015717, 0.268873, -0.892916, -2.207947, 0.134040, -0.892916, -2.196311, 0.085715, -0.892916, -1.978022, 0.085715, -0.892916, -2.217598, 0.147691, -0.892916, -2.207947, 0.134040, -0.892916, -1.978022, 0.085715, -0.892916, -1.978022, 0.085715, -0.892916, -2.015717, 0.268873, -0.892916, -2.072165, 0.321415, -0.892916, -2.072165, 0.321415, -0.892916, -2.630515, 0.343027, -0.892916, -2.765589, 0.295211, -0.892916, -2.765589, 0.295211, -0.892916, -2.823834, 0.215437, -0.892916, -2.843618, -0.121516, -0.892916, -2.843618, -0.121516, -0.892916, -2.814580, -0.234033, -0.892916, -2.733219, -0.319657, -0.892916, -2.733219, -0.319657, -0.892916, -2.172292, -0.346702, -0.892916, -2.057029, -0.320044, -0.892916, -2.057029, -0.320044, -0.892916, -2.003624, -0.270094, -0.892916, -1.969501, -0.069777, -0.892916, -1.969501, -0.069777, -0.892916, -2.203065, -0.136493, -0.892916, -2.207703, -0.143898, -0.892916, -1.969501, -0.069777, -0.892916, -2.207703, -0.143898, -0.892916, -2.213172, -0.149869, -0.892916, -2.843618, -0.121516, -0.892916, -2.733219, -0.319657, -0.892916, -2.057029, -0.320044, -0.892916, -2.217598, 0.147691, -0.892916, -1.978022, 0.085715, -0.892916, -2.072165, 0.321415, -0.892916, -2.230427, 0.157137, -0.892916, -2.217598, 0.147691, -0.892916, -2.072165, 0.321415, -0.892916, -2.057029, -0.320044, -0.892916, -1.969501, -0.069777, -0.892916, -2.213172, -0.149869, -0.892916, -2.057029, -0.320044, -0.892916, -2.213172, -0.149869, -0.892916, -2.226547, -0.158165, -0.892916, -2.253638, 0.166953, -0.892916, -2.230427, 0.157137, -0.892916, -2.072165, 0.321415, -0.892916, -2.550087, 0.164851, -0.892916, -2.253638, 0.166953, -0.892916, -2.072165, 0.321415, -0.892916, -2.057029, -0.320044, -0.892916, -2.226547, -0.158165, -0.892916, -2.243073, -0.162681, -0.892916, -2.057029, -0.320044, -0.892916, -2.243073, -0.162681, -0.892916, -2.550787, -0.162686, -0.892916, -2.550087, 0.164851, -0.892916, -2.072165, 0.321415, -0.892916, -2.765589, 0.295211, -0.892916, -2.564546, 0.161168, -0.892916, -2.550087, 0.164851, -0.892916, -2.765589, 0.295211, -0.892916, -2.843618, -0.121516, -0.892916, -2.057029, -0.320044, -0.892916, -2.550787, -0.162686, -0.892916, -2.843618, -0.121516, -0.892916, -2.550787, -0.162686, -0.892916, -2.579758, -0.151314, -0.892916, -2.582925, 0.150764, -0.892916, -2.564546, 0.161168, -0.892916, -2.765589, 0.295211, -0.892916, -2.592369, 0.141811, -0.892916, -2.582925, 0.150764, -0.892916, -2.765589, 0.295211, -0.892916, -2.843618, -0.121516, -0.892916, -2.579758, -0.151314, -0.892916, -2.593731, -0.141425, -0.892916, -2.843618, -0.121516, -0.892916, -2.593731, -0.141425, -0.892916, -2.597832, -0.137237, -0.892916, -2.592369, 0.141811, -0.892916, -2.765589, 0.295211, -0.892916, -2.843618, -0.121516, -0.892916, -2.604900, 0.123866, -0.892916, -2.592369, 0.141811, -0.892916, -2.843618, -0.121516, -0.892916, -2.843618, -0.121516, -0.892916, -2.597832, -0.137237, -0.892916, -2.610097, -0.114556, -0.892916, -2.843618, -0.121516, -0.892916, -2.610097, -0.114556, -0.892916, -2.618108, -0.079760, -0.892916, -2.612861, 0.106340, -0.892916, -2.604900, 0.123866, -0.892916, -2.843618, -0.121516, -0.892916, -2.843618, -0.121516, -0.892916, -2.618108, -0.079760, -0.892916, -2.617733, 0.084818, -0.892916, -2.617733, 0.084818, -0.892916, -2.612861, 0.106340, -0.892916, -2.843618, -0.121516, -0.892916, -1.888187, -0.348029, -0.892916, -1.198017, -0.348029, -0.892916, -1.198017, -0.156346, -0.892916, -1.657790, -0.156346, -0.892916, -1.657790, 0.346391, -0.892916, -1.888187, 0.346391, -0.892916, -1.888187, -0.348029, -0.892916, -1.198017, -0.156346, -0.892916, -1.657790, -0.156346, -0.892916, -1.888187, -0.348029, -0.892916, -1.657790, -0.156346, -0.892916, -1.888187, 0.346391, -0.892916, 1.995138, 0.346373, -0.892916, 1.169983, 0.346373, -0.892916, 1.169983, 0.154672, -0.892916, 1.995138, 0.346373, -0.892916, 1.169983, 0.154672, -0.892916, 1.995138, 0.154672, -0.892916, -1.151593, -0.348047, -0.892916, -0.921195, -0.348047, -0.892916, -0.921195, 0.346373, -0.892916, -1.151593, -0.348047, -0.892916, -0.921195, 0.346373, -0.892916, -1.151593, 0.346373, -0.892916, 2.065868, -0.348029, -0.892916, 2.839667, -0.348029, -0.892916, 2.839667, -0.154786, -0.892916, 2.065868, -0.348029, -0.892916, 2.839667, -0.154786, -0.892916, 2.293324, -0.154786, -0.892916, 2.832833, 0.153453, -0.892916, 2.832833, 0.346373, -0.892916, 2.065868, 0.346373, -0.892916, 2.293324, 0.153453, -0.892916, 2.832833, 0.153453, -0.892916, 2.065868, 0.346373, -0.892916, 2.065868, 0.346373, -0.892916, 2.065868, -0.348029, -0.892916, 2.293324, -0.154786, -0.892916, 2.293324, -0.097970, -0.892916, 2.802499, -0.097970, -0.892916, 2.802499, 0.096314, -0.892916, 2.065868, 0.346373, -0.892916, 2.293324, -0.154786, -0.892916, 2.293324, -0.097970, -0.892916, 2.293324, 0.096314, -0.892916, 2.293324, 0.153453, -0.892916, 2.065868, 0.346373, -0.892916, 2.293324, -0.097970, -0.892916, 2.802499, 0.096314, -0.892916, 2.293324, 0.096314, -0.892916, 2.065868, 0.346373, -0.892916, 2.293324, -0.097970, -0.892916, 2.293324, 0.096314, -0.892916, 1.467362, -0.348047, -0.892916, 1.697741, -0.348047, -0.892916, 1.697741, 0.154672, -0.892916, 1.467362, -0.348047, -0.892916, 1.697741, 0.154672, -0.892916, 1.467362, 0.154672, -0.892916, 0.767289, -0.045009, -0.892916, 0.826689, 0.058885, -0.892916, 0.353778, -0.348029, -0.892916, 0.353778, -0.348029, -0.892916, 0.614707, -0.348029, -0.892916, 0.678800, -0.228712, -0.892916, 1.093763, -0.228712, -0.892916, 1.160260, -0.348029, -0.892916, 1.412955, -0.348029, -0.892916, 0.767289, -0.045009, -0.892916, 0.353778, -0.348029, -0.892916, 0.678800, -0.228712, -0.892916, 1.093763, -0.228712, -0.892916, 1.412955, -0.348029, -0.892916, 1.137331, 0.155493, -0.892916, 0.767289, -0.045009, -0.892916, 0.678800, -0.228712, -0.892916, 1.093763, -0.228712, -0.892916, 1.137331, 0.155493, -0.892916, 0.886075, 0.162779, -0.892916, 1.007732, -0.045009, -0.892916, 1.007732, -0.045009, -0.892916, 0.767289, -0.045009, -0.892916, 1.093763, -0.228712, -0.892916, 1.093763, -0.228712, -0.892916, 1.137331, 0.155493, -0.892916, 1.007732, -0.045009, -0.892916, 0.886075, 0.162779, -0.000090, 1.007732, -0.045009, -0.000090, 1.007732, -0.045009, -0.892916, 0.886075, 0.162779, -0.000090, 1.007732, -0.045009, -0.892916, 0.886075, 0.162779, -0.892916, -2.207703, -0.143898, -0.000090, -2.213172, -0.149869, -0.000090, -2.213172, -0.149869, -0.892916, -2.207703, -0.143898, -0.000090, -2.213172, -0.149869, -0.892916, -2.207703, -0.143898, -0.892916, 0.744561, 0.346373, -0.000090, 0.353778, -0.348029, -0.000090, 0.353778, -0.348029, -0.892916, 0.744561, 0.346373, -0.000090, 0.353778, -0.348029, -0.892916, 0.744561, 0.346373, -0.892916, -2.172292, -0.346702, -0.000090, -2.080747, -0.329695, -0.000090, -2.080747, -0.329695, -0.892916, -2.172292, -0.346702, -0.000090, -2.080747, -0.329695, -0.892916, -2.172292, -0.346702, -0.892916, -0.844132, 0.346373, -0.000090, -0.844132, -0.348047, -0.000090, -0.844132, -0.348047, -0.892916, -0.844132, 0.346373, -0.000090, -0.844132, -0.348047, -0.892916, -0.844132, 0.346373, -0.892916, 1.160260, -0.348029, -0.000090, 1.412955, -0.348029, -0.000090, 1.412955, -0.348029, -0.892916, 1.160260, -0.348029, -0.000090, 1.412955, -0.348029, -0.892916, 1.160260, -0.348029, -0.892916, -2.829242, -0.196717, -0.000090, -2.814580, -0.234033, -0.000090, -2.814580, -0.234033, -0.892916, -2.829242, -0.196717, -0.000090, -2.814580, -0.234033, -0.892916, -2.829242, -0.196717, -0.892916, -0.029650, 0.346373, -0.000090, -0.264299, -0.082134, -0.000090, -0.264299, -0.082134, -0.892916, -0.029650, 0.346373, -0.000090, -0.264299, -0.082134, -0.892916, -0.029650, 0.346373, -0.892916, 1.093763, -0.228712, -0.000090, 1.160260, -0.348029, -0.000090, 1.160260, -0.348029, -0.892916, 1.093763, -0.228712, -0.000090, 1.160260, -0.348029, -0.892916, 1.093763, -0.228712, -0.892916, -2.597832, -0.137237, -0.000090, -2.610097, -0.114556, -0.000090, -2.610097, -0.114556, -0.892916, -2.597832, -0.137237, -0.000090, -2.610097, -0.114556, -0.892916, -2.597832, -0.137237, -0.892916, 0.312162, 0.346373, -0.000090, -0.029650, 0.346373, -0.000090, -0.029650, 0.346373, -0.892916, 0.312162, 0.346373, -0.000090, -0.029650, 0.346373, -0.892916, 0.312162, 0.346373, -0.892916, 0.826689, 0.058885, -0.000090, 0.886075, 0.162779, -0.000090, 0.886075, 0.162779, -0.892916, 0.826689, 0.058885, -0.000090, 0.886075, 0.162779, -0.892916, 0.826689, 0.058885, -0.892916, -2.660144, -0.342339, -0.000090, -2.172292, -0.346702, -0.000090, -2.172292, -0.346702, -0.892916, -2.660144, -0.342339, -0.000090, -2.172292, -0.346702, -0.892916, -2.660144, -0.342339, -0.892916, -0.178232, -0.348047, -0.000090, 0.095451, 0.128667, -0.000090, 0.095451, 0.128667, -0.892916, -0.178232, -0.348047, -0.000090, 0.095451, 0.128667, -0.892916, -0.178232, -0.348047, -0.892916, -2.733219, -0.319657, -0.000090, -2.660144, -0.342339, -0.000090, -2.660144, -0.342339, -0.892916, -2.733219, -0.319657, -0.000090, -2.660144, -0.342339, -0.892916, -2.733219, -0.319657, -0.892916, -0.356268, -0.348047, -0.000090, -0.178232, -0.348047, -0.000090, -0.178232, -0.348047, -0.892916, -0.356268, -0.348047, -0.000090, -0.178232, -0.348047, -0.892916, -0.356268, -0.348047, -0.892916, 0.767289, -0.045009, -0.000090, 0.826689, 0.058885, -0.000090, 0.826689, 0.058885, -0.892916, 0.767289, -0.045009, -0.000090, 0.826689, 0.058885, -0.892916, 0.767289, -0.045009, -0.892916, -2.618108, -0.079760, -0.000090, -2.617733, 0.084818, -0.000090, -2.617733, 0.084818, -0.892916, -2.618108, -0.079760, -0.000090, -2.617733, 0.084818, -0.892916, -2.618108, -0.079760, -0.892916, -0.264299, -0.082134, -0.000090, -0.499899, 0.346373, -0.000090, -0.499899, 0.346373, -0.892916, -0.264299, -0.082134, -0.000090, -0.499899, 0.346373, -0.892916, -0.264299, -0.082134, -0.892916, -1.151593, 0.346373, -0.000090, -1.151593, -0.348047, -0.000090, -1.151593, -0.348047, -0.892916, -1.151593, 0.346373, -0.000090, -1.151593, -0.348047, -0.892916, -1.151593, 0.346373, -0.892916, -2.024672, -0.296359, -0.000090, -2.003624, -0.270094, -0.000090, -2.003624, -0.270094, -0.892916, -2.024672, -0.296359, -0.000090, -2.003624, -0.270094, -0.892916, -2.024672, -0.296359, -0.892916, -0.620946, -0.348047, -0.000090, -0.625915, 0.128757, -0.000090, -0.625915, 0.128757, -0.892916, -0.620946, -0.348047, -0.000090, -0.625915, 0.128757, -0.892916, -0.620946, -0.348047, -0.892916, -0.921195, -0.348047, -0.000090, -0.921195, 0.346373, -0.000090, -0.921195, 0.346373, -0.892916, -0.921195, -0.348047, -0.000090, -0.921195, 0.346373, -0.892916, -0.921195, -0.348047, -0.892916, -2.610097, -0.114556, -0.000090, -2.618108, -0.079760, -0.000090, -2.618108, -0.079760, -0.892916, -2.610097, -0.114556, -0.000090, -2.618108, -0.079760, -0.892916, -2.610097, -0.114556, -0.892916, 0.095451, 0.128667, -0.000090, 0.086410, -0.348047, -0.000090, 0.086410, -0.348047, -0.892916, 0.095451, 0.128667, -0.000090, 0.086410, -0.348047, -0.892916, 0.095451, 0.128667, -0.892916, -1.151593, -0.348047, -0.000090, -0.921195, -0.348047, -0.000090, -0.921195, -0.348047, -0.892916, -1.151593, -0.348047, -0.000090, -0.921195, -0.348047, -0.892916, -1.151593, -0.348047, -0.892916, -1.978022, 0.085715, -0.000090, -1.985468, 0.190498, -0.000090, -1.985468, 0.190498, -0.892916, -1.978022, 0.085715, -0.000090, -1.985468, 0.190498, -0.892916, -1.978022, 0.085715, -0.892916, -0.499899, 0.346373, -0.000090, -0.844132, 0.346373, -0.000090, -0.844132, 0.346373, -0.892916, -0.499899, 0.346373, -0.000090, -0.844132, 0.346373, -0.892916, -0.499899, 0.346373, -0.892916, -0.921195, 0.346373, -0.000090, -1.151593, 0.346373, -0.000090, -1.151593, 0.346373, -0.892916, -0.921195, 0.346373, -0.000090, -1.151593, 0.346373, -0.892916, -0.921195, 0.346373, -0.892916, -2.550787, -0.162686, -0.000090, -2.579758, -0.151314, -0.000090, -2.579758, -0.151314, -0.892916, -2.550787, -0.162686, -0.000090, -2.579758, -0.151314, -0.892916, -2.550787, -0.162686, -0.892916, -0.625915, 0.128757, -0.000090, -0.356268, -0.348047, -0.000090, -0.356268, -0.348047, -0.892916, -0.625915, 0.128757, -0.000090, -0.356268, -0.348047, -0.892916, -0.625915, 0.128757, -0.892916, -2.003624, -0.270094, -0.000090, -1.988544, -0.240407, -0.000090, -1.988544, -0.240407, -0.892916, -2.003624, -0.270094, -0.000090, -1.988544, -0.240407, -0.892916, -2.003624, -0.270094, -0.892916, 0.086410, -0.348047, -0.000090, 0.312162, -0.348047, -0.000090, 0.312162, -0.348047, -0.892916, 0.086410, -0.348047, -0.000090, 0.312162, -0.348047, -0.892916, 0.086410, -0.348047, -0.892916, -2.196341, -0.116732, -0.000090, -2.203065, -0.136493, -0.000090, -2.203065, -0.136493, -0.892916, -2.196341, -0.116732, -0.000090, -2.203065, -0.136493, -0.892916, -2.196341, -0.116732, -0.892916, 0.312162, -0.348047, -0.000090, 0.312162, 0.346373, -0.000090, 0.312162, 0.346373, -0.892916, 0.312162, -0.348047, -0.000090, 0.312162, 0.346373, -0.892916, 0.312162, -0.348047, -0.892916, -2.765589, 0.295211, -0.000090, -2.794378, 0.267778, -0.000090, -2.794378, 0.267778, -0.892916, -2.765589, 0.295211, -0.000090, -2.794378, 0.267778, -0.892916, -2.765589, 0.295211, -0.892916, -0.844132, -0.348047, -0.000090, -0.620946, -0.348047, -0.000090, -0.620946, -0.348047, -0.892916, -0.844132, -0.348047, -0.000090, -0.620946, -0.348047, -0.892916, -0.844132, -0.348047, -0.892916, -2.604900, 0.123866, -0.000090, -2.592369, 0.141811, -0.000090, -2.592369, 0.141811, -0.892916, -2.604900, 0.123866, -0.000090, -2.592369, 0.141811, -0.892916, -2.604900, 0.123866, -0.892916, 1.169983, 0.154672, -0.000090, 1.467362, 0.154672, -0.000090, 1.467362, 0.154672, -0.892916, 1.169983, 0.154672, -0.000090, 1.467362, 0.154672, -0.892916, 1.169983, 0.154672, -0.892916, -2.617733, 0.084818, -0.000090, -2.612861, 0.106340, -0.000090, -2.612861, 0.106340, -0.892916, -2.617733, 0.084818, -0.000090, -2.612861, 0.106340, -0.892916, -2.617733, 0.084818, -0.892916, 1.169983, 0.346373, -0.000090, 1.169983, 0.154672, -0.000090, 1.169983, 0.154672, -0.892916, 1.169983, 0.346373, -0.000090, 1.169983, 0.154672, -0.892916, 1.169983, 0.346373, -0.892916, -2.115518, 0.334405, -0.000090, -2.630515, 0.343027, -0.000090, -2.630515, 0.343027, -0.892916, -2.115518, 0.334405, -0.000090, -2.630515, 0.343027, -0.892916, -2.115518, 0.334405, -0.892916, -2.057029, -0.320044, -0.000090, -2.024672, -0.296359, -0.000090, -2.024672, -0.296359, -0.892916, -2.057029, -0.320044, -0.000090, -2.024672, -0.296359, -0.892916, -2.057029, -0.320044, -0.892916, 1.697741, -0.348047, -0.000090, 1.697741, 0.154672, -0.000090, 1.697741, 0.154672, -0.892916, 1.697741, -0.348047, -0.000090, 1.697741, 0.154672, -0.892916, 1.697741, -0.348047, -0.892916, -2.226547, -0.158165, -0.000090, -2.243073, -0.162682, -0.000090, -2.243073, -0.162681, -0.892916, -2.226547, -0.158165, -0.000090, -2.243073, -0.162681, -0.892916, -2.226547, -0.158165, -0.892916, 1.467362, 0.154672, -0.000090, 1.467362, -0.348047, -0.000090, 1.467362, -0.348047, -0.892916, 1.467362, 0.154672, -0.000090, 1.467362, -0.348047, -0.892916, 1.467362, 0.154672, -0.892916, -1.969501, -0.069777, -0.000090, -2.190643, -0.069777, -0.000090, -2.190643, -0.069777, -0.892916, -1.969501, -0.069777, -0.000090, -2.190643, -0.069777, -0.892916, -1.969501, -0.069777, -0.892916, 1.995138, 0.346373, -0.000090, 1.169983, 0.346373, -0.000090, 1.169983, 0.346373, -0.892916, 1.995138, 0.346373, -0.000090, 1.169983, 0.346373, -0.892916, 1.995138, 0.346373, -0.892916, -2.794378, 0.267778, -0.000090, -2.823834, 0.215437, -0.000090, -2.823834, 0.215437, -0.892916, -2.794378, 0.267778, -0.000090, -2.823834, 0.215437, -0.892916, -2.794378, 0.267778, -0.892916, 1.995138, 0.154672, -0.000090, 1.995138, 0.346373, -0.000090, 1.995138, 0.346373, -0.892916, 1.995138, 0.154672, -0.000090, 1.995138, 0.346373, -0.892916, 1.995138, 0.154672, -0.892916, -2.564546, 0.161168, -0.000090, -2.550087, 0.164851, -0.000090, -2.550087, 0.164851, -0.892916, -2.564546, 0.161168, -0.000090, -2.550087, 0.164851, -0.892916, -2.564546, 0.161168, -0.892916, -2.612861, 0.106340, -0.000090, -2.604900, 0.123866, -0.000090, -2.604900, 0.123866, -0.892916, -2.612861, 0.106340, -0.000090, -2.604900, 0.123866, -0.892916, -2.612861, 0.106340, -0.892916, 1.467362, -0.348047, -0.000090, 1.697741, -0.348047, -0.000090, 1.697741, -0.348047, -0.892916, 1.467362, -0.348047, -0.000090, 1.697741, -0.348047, -0.892916, 1.467362, -0.348047, -0.892916, -2.838819, 0.155748, -0.000090, -2.843618, -0.121516, -0.000090, -2.843618, -0.121516, -0.892916, -2.838819, 0.155748, -0.000090, -2.843618, -0.121516, -0.892916, -2.838819, 0.155748, -0.892916, 1.697741, 0.154672, -0.000090, 1.995138, 0.154672, -0.000090, 1.995138, 0.154672, -0.892916, 1.697741, 0.154672, -0.000090, 1.995138, 0.154672, -0.892916, 1.697741, 0.154672, -0.892916, -2.217598, 0.147691, -0.000090, -2.207947, 0.134040, -0.000090, -2.207947, 0.134040, -0.892916, -2.217598, 0.147691, -0.000090, -2.207947, 0.134040, -0.892916, -2.217598, 0.147691, -0.892916, -2.015717, 0.268873, -0.000090, -2.040495, 0.299422, -0.000090, -2.040495, 0.299422, -0.892916, -2.015717, 0.268873, -0.000090, -2.040495, 0.299422, -0.892916, -2.015717, 0.268873, -0.892916, 2.839667, -0.154786, -0.000090, 2.293324, -0.154786, -0.000090, 2.293324, -0.154786, -0.892916, 2.839667, -0.154786, -0.000090, 2.293324, -0.154786, -0.892916, 2.839667, -0.154786, -0.892916, -2.630515, 0.343027, -0.000090, -2.724413, 0.319409, -0.000090, -2.724413, 0.319409, -0.892916, -2.630515, 0.343027, -0.000090, -2.724413, 0.319409, -0.892916, -2.630515, 0.343027, -0.892916, 2.293324, -0.097970, -0.000090, 2.802499, -0.097970, -0.000090, 2.802499, -0.097970, -0.892916, 2.293324, -0.097970, -0.000090, 2.802499, -0.097970, -0.892916, 2.293324, -0.097970, -0.892916, -2.207947, 0.134040, -0.000090, -2.196311, 0.085715, -0.000090, -2.196311, 0.085715, -0.892916, -2.207947, 0.134040, -0.000090, -2.196311, 0.085715, -0.892916, -2.207947, 0.134040, -0.892916, 2.293324, -0.154786, -0.000090, 2.293324, -0.097970, -0.000090, 2.293324, -0.097970, -0.892916, 2.293324, -0.154786, -0.000090, 2.293324, -0.097970, -0.892916, 2.293324, -0.154786, -0.892916, -2.579758, -0.151314, -0.000090, -2.593731, -0.141425, -0.000090, -2.593731, -0.141425, -0.892916, -2.579758, -0.151314, -0.000090, -2.593731, -0.141425, -0.892916, -2.579758, -0.151314, -0.892916, 2.832833, 0.153453, -0.000090, 2.832833, 0.346373, -0.000090, 2.832833, 0.346373, -0.892916, 2.832833, 0.153453, -0.000090, 2.832833, 0.346373, -0.892916, 2.832833, 0.153453, -0.892916, -2.773077, -0.288653, -0.000090, -2.733219, -0.319657, -0.000090, -2.733219, -0.319657, -0.892916, -2.773077, -0.288653, -0.000090, -2.733219, -0.319657, -0.892916, -2.773077, -0.288653, -0.892916, 2.065868, 0.346373, -0.000090, 2.065868, -0.348029, -0.000090, 2.065868, -0.348029, -0.892916, 2.065868, 0.346373, -0.000090, 2.065868, -0.348029, -0.892916, 2.065868, 0.346373, -0.892916, -1.988544, -0.240407, -0.000090, -1.972618, -0.173883, -0.000090, -1.972618, -0.173883, -0.892916, -1.988544, -0.240407, -0.000090, -1.972618, -0.173883, -0.892916, -1.988544, -0.240407, -0.892916, 2.802499, -0.097970, -0.000090, 2.802499, 0.096314, -0.000090, 2.802499, 0.096314, -0.892916, 2.802499, -0.097970, -0.000090, 2.802499, 0.096314, -0.892916, 2.802499, -0.097970, -0.892916, -2.203065, -0.136493, -0.000090, -2.207703, -0.143898, -0.000090, -2.207703, -0.143898, -0.892916, -2.203065, -0.136493, -0.000090, -2.207703, -0.143898, -0.892916, -2.203065, -0.136493, -0.892916, 2.293324, 0.153453, -0.000090, 2.832833, 0.153453, -0.000090, 2.832833, 0.153453, -0.892916, 2.293324, 0.153453, -0.000090, 2.832833, 0.153453, -0.892916, 2.293324, 0.153453, -0.892916, -1.972618, -0.173883, -0.000090, -1.969501, -0.069777, -0.000090, -1.969501, -0.069777, -0.892916, -1.972618, -0.173883, -0.000090, -1.969501, -0.069777, -0.892916, -1.972618, -0.173883, -0.892916, 2.839667, -0.348029, -0.000090, 2.839667, -0.154786, -0.000090, 2.839667, -0.154786, -0.892916, 2.839667, -0.348029, -0.000090, 2.839667, -0.154786, -0.892916, 2.839667, -0.348029, -0.892916, -2.190643, -0.069777, -0.000090, -2.196341, -0.116732, -0.000090, -2.196341, -0.116732, -0.892916, -2.190643, -0.069777, -0.000090, -2.196341, -0.116732, -0.892916, -2.190643, -0.069777, -0.892916, 2.832833, 0.346373, -0.000090, 2.065868, 0.346373, -0.000090, 2.065868, 0.346373, -0.892916, 2.832833, 0.346373, -0.000090, 2.065868, 0.346373, -0.892916, 2.832833, 0.346373, -0.892916, -2.582925, 0.150763, -0.000090, -2.564546, 0.161168, -0.000090, -2.564546, 0.161168, -0.892916, -2.582925, 0.150763, -0.000090, -2.564546, 0.161168, -0.892916, -2.582925, 0.150764, -0.892916, 2.293324, 0.096314, -0.000090, 2.293324, 0.153453, -0.000090, 2.293324, 0.153453, -0.892916, 2.293324, 0.096314, -0.000090, 2.293324, 0.153453, -0.892916, 2.293324, 0.096314, -0.892916, -2.724413, 0.319409, -0.000090, -2.765589, 0.295211, -0.000090, -2.765589, 0.295211, -0.892916, -2.724413, 0.319409, -0.000090, -2.765589, 0.295211, -0.892916, -2.724413, 0.319409, -0.892916, 2.065868, -0.348029, -0.000090, 2.839667, -0.348029, -0.000090, 2.839667, -0.348029, -0.892916, 2.065868, -0.348029, -0.000090, 2.839667, -0.348029, -0.892916, 2.065868, -0.348029, -0.892916, -2.823834, 0.215437, -0.000090, -2.838819, 0.155748, -0.000090, -2.838819, 0.155748, -0.892916, -2.823834, 0.215437, -0.000090, -2.838819, 0.155748, -0.892916, -2.823834, 0.215437, -0.892916, 2.802499, 0.096314, -0.000090, 2.293324, 0.096314, -0.000090, 2.293324, 0.096314, -0.892916, 2.802499, 0.096314, -0.000090, 2.293324, 0.096314, -0.892916, 2.802499, 0.096314, -0.892916, -2.550087, 0.164851, -0.000090, -2.253638, 0.166953, -0.000090, -2.253638, 0.166953, -0.892916, -2.550087, 0.164851, -0.000090, -2.253638, 0.166953, -0.892916, -2.550087, 0.164851, -0.892916, -1.198017, -0.348029, -0.000090, -1.198017, -0.156346, -0.000090, -1.198017, -0.156346, -0.892916, -1.198017, -0.348029, -0.000090, -1.198017, -0.156346, -0.892916, -1.198017, -0.348029, -0.892916, -2.814580, -0.234033, -0.000090, -2.773077, -0.288653, -0.000090, -2.773077, -0.288653, -0.892916, -2.814580, -0.234033, -0.000090, -2.773077, -0.288653, -0.892916, -2.814580, -0.234033, -0.892916, -1.888187, -0.348029, -0.000090, -1.198017, -0.348029, -0.000090, -1.198017, -0.348029, -0.892916, -1.888187, -0.348029, -0.000090, -1.198017, -0.348029, -0.892916, -1.888187, -0.348029, -0.892916, -2.843618, -0.121516, -0.000090, -2.829242, -0.196717, -0.000090, -2.829242, -0.196717, -0.892916, -2.843618, -0.121516, -0.000090, -2.829242, -0.196717, -0.892916, -2.843618, -0.121516, -0.892916, -1.198017, -0.156346, -0.000090, -1.657790, -0.156346, -0.000090, -1.657790, -0.156346, -0.892916, -1.198017, -0.156346, -0.000090, -1.657790, -0.156346, -0.892916, -1.198017, -0.156346, -0.892916, -2.230427, 0.157137, -0.000090, -2.217598, 0.147691, -0.000090, -2.217598, 0.147691, -0.892916, -2.230427, 0.157137, -0.000090, -2.217598, 0.147691, -0.892916, -2.230427, 0.157137, -0.892916, -1.657790, 0.346391, -0.000090, -1.888187, 0.346391, -0.000090, -1.888187, 0.346391, -0.892916, -1.657790, 0.346391, -0.000090, -1.888187, 0.346391, -0.892916, -1.657790, 0.346391, -0.892916, -1.985468, 0.190498, -0.000090, -2.015717, 0.268873, -0.000090, -2.015717, 0.268873, -0.892916, -1.985468, 0.190498, -0.000090, -2.015717, 0.268873, -0.892916, -1.985468, 0.190498, -0.892916, -1.657790, -0.156346, -0.000090, -1.657790, 0.346391, -0.000090, -1.657790, 0.346391, -0.892916, -1.657790, -0.156346, -0.000090, -1.657790, 0.346391, -0.892916, -1.657790, -0.156346, -0.892916, -2.072165, 0.321415, -0.000090, -2.115518, 0.334405, -0.000090, -2.115518, 0.334405, -0.892916, -2.072165, 0.321415, -0.000090, -2.115518, 0.334405, -0.892916, -2.072165, 0.321415, -0.892916, -1.888187, 0.346391, -0.000090, -1.888187, -0.348029, -0.000090, -1.888187, -0.348029, -0.892916, -1.888187, 0.346391, -0.000090, -1.888187, -0.348029, -0.892916, -1.888187, 0.346391, -0.892916, 1.007732, -0.045009, -0.000090, 0.767289, -0.045009, -0.000090, 0.767289, -0.045009, -0.892916, 1.007732, -0.045009, -0.000090, 0.767289, -0.045009, -0.892916, 1.007732, -0.045009, -0.892916, -2.593731, -0.141425, -0.000090, -2.597832, -0.137237, -0.000090, -2.597832, -0.137237, -0.892916, -2.593731, -0.141425, -0.000090, -2.597832, -0.137237, -0.892916, -2.593731, -0.141425, -0.892916, 1.032845, 0.346373, -0.000090, 0.744561, 0.346373, -0.000090, 0.744561, 0.346373, -0.892916, 1.032845, 0.346373, -0.000090, 0.744561, 0.346373, -0.892916, 1.032845, 0.346373, -0.892916, -2.080747, -0.329695, -0.000090, -2.057029, -0.320044, -0.000090, -2.057029, -0.320044, -0.892916, -2.080747, -0.329695, -0.000090, -2.057029, -0.320044, -0.892916, -2.080747, -0.329695, -0.892916, 0.353778, -0.348029, -0.000090, 0.614707, -0.348029, -0.000090, 0.614707, -0.348029, -0.892916, 0.353778, -0.348029, -0.000090, 0.614707, -0.348029, -0.892916, 0.353778, -0.348029, -0.892916, -2.196311, 0.085715, -0.000090, -1.978022, 0.085715, -0.000090, -1.978022, 0.085715, -0.892916, -2.196311, 0.085715, -0.000090, -1.978022, 0.085715, -0.892916, -2.196311, 0.085715, -0.892916, 1.412955, -0.348029, -0.000090, 1.137331, 0.155493, -0.000090, 1.137331, 0.155493, -0.892916, 1.412955, -0.348029, -0.000090, 1.137331, 0.155493, -0.892916, 1.412955, -0.348029, -0.892916, -2.243073, -0.162682, -0.000090, -2.550787, -0.162686, -0.000090, -2.550787, -0.162686, -0.892916, -2.243073, -0.162682, -0.000090, -2.550787, -0.162686, -0.892916, -2.243073, -0.162681, -0.892916, 0.678800, -0.228712, -0.000090, 1.093763, -0.228712, -0.000090, 1.093763, -0.228712, -0.892916, 0.678800, -0.228712, -0.000090, 1.093763, -0.228712, -0.892916, 0.678800, -0.228712, -0.892916, -2.213172, -0.149869, -0.000090, -2.226547, -0.158165, -0.000090, -2.226547, -0.158165, -0.892916, -2.213172, -0.149869, -0.000090, -2.226547, -0.158165, -0.892916, -2.213172, -0.149869, -0.892916, 0.614707, -0.348029, -0.000090, 0.678800, -0.228712, -0.000090, 0.678800, -0.228712, -0.892916, 0.614707, -0.348029, -0.000090, 0.678800, -0.228712, -0.892916, 0.614707, -0.348029, -0.892916, -2.592369, 0.141811, -0.000090, -2.582925, 0.150763, -0.000090, -2.582925, 0.150764, -0.892916, -2.592369, 0.141811, -0.000090, -2.582925, 0.150764, -0.892916, -2.592369, 0.141811, -0.892916, -2.253638, 0.166953, -0.000090, -2.230427, 0.157137, -0.000090, -2.230427, 0.157137, -0.892916, -2.253638, 0.166953, -0.000090, -2.230427, 0.157137, -0.892916, -2.253638, 0.166953, -0.892916, 1.137331, 0.155493, -0.000090, 1.032845, 0.346373, -0.000090, 1.032845, 0.346373, -0.892916, 1.137331, 0.155493, -0.000090, 1.032845, 0.346373, -0.892916, 1.137331, 0.155493, -0.892916, -2.040495, 0.299422, -0.000090, -2.072165, 0.321415, -0.000090, -2.072165, 0.321415, -0.892916, -2.040495, 0.299422, -0.000090, -2.072165, 0.321415, -0.892916, -2.040495, 0.299422, -0.892916]);

const mesh_text = new Float32Array([-2.642975, -0.119727, 0.000089, -2.652378, -0.064215, 0.000089, -2.806622, -0.114726, 0.000089, 1.205850, 0.190538, 0.000089, 1.959253, 0.310501, 0.000090, 1.205850, 0.310501, 0.000090, 1.205850, 0.190538, 0.000089, 1.959253, 0.190538, 0.000089, 1.959253, 0.310501, 0.000090, 1.503229, 0.190538, 0.000089, 1.959253, 0.190538, 0.000089, 1.205850, 0.190538, 0.000089, 1.503229, -0.312180, 0.000089, 1.661856, 0.190538, 0.000089, 1.503229, 0.190538, 0.000089, 1.661856, 0.190538, 0.000089, 1.959253, 0.190538, 0.000089, 1.503229, 0.190538, 0.000089, 1.503229, -0.312180, 0.000089, 1.661856, -0.312180, 0.000089, 1.661856, 0.190538, 0.000089, 2.101741, -0.312168, 0.000089, 2.257444, 0.189313, 0.000089, 2.101741, 0.310513, 0.000090, 2.257444, 0.189313, 0.000089, 2.796952, 0.310513, 0.000090, 2.101741, 0.310513, 0.000090, 2.257444, 0.189313, 0.000089, 2.796952, 0.189313, 0.000089, 2.796952, 0.310513, 0.000090, 2.257444, -0.062109, 0.000089, 2.766619, 0.060437, 0.000089, 2.257444, 0.060437, 0.000089, 2.257444, -0.062109, 0.000089, 2.766619, -0.062109, 0.000089, 2.766619, 0.060437, 0.000089, 2.101741, -0.312168, 0.000089, 2.257444, -0.190662, 0.000089, 2.257444, 0.189313, 0.000089, 2.101741, -0.312168, 0.000089, 2.803787, -0.190662, 0.000089, 2.257444, -0.190662, 0.000089, 2.101741, -0.312168, 0.000089, 2.803787, -0.312168, 0.000089, 2.803787, -0.190662, 0.000089, -1.852307, -0.312166, 0.000089, -1.693662, 0.310515, 0.000090, -1.852307, 0.310515, 0.000090, -1.852307, -0.312166, 0.000089, -1.693662, -0.192221, 0.000089, -1.693662, 0.310515, 0.000090, -1.852307, -0.312166, 0.000089, -1.233889, -0.192221, 0.000089, -1.693662, -0.192221, 0.000089, -1.852307, -0.312166, 0.000089, -1.233889, -0.312166, 0.000089, -1.233889, -0.192221, 0.000089, 0.415135, -0.312157, 0.000089, 0.885707, 0.234410, 0.000090, 0.765539, 0.310506, 0.000090, 0.885707, 0.234410, 0.000090, 1.011579, 0.310506, 0.000090, 0.765539, 0.310506, 0.000090, 0.885707, 0.234410, 0.000090, 1.352422, -0.312157, 0.000089, 1.011579, 0.310506, 0.000090, 0.415135, -0.312157, 0.000089, 0.705464, -0.080876, 0.000089, 0.885707, 0.234410, 0.000090, 1.070326, -0.080876, 0.000089, 1.352422, -0.312157, 0.000089, 0.885707, 0.234410, 0.000090, 0.415135, -0.312157, 0.000089, 0.657336, -0.192840, 0.000089, 0.705464, -0.080876, 0.000089, 0.657336, -0.192840, 0.000089, 1.070326, -0.080876, 0.000089, 0.705464, -0.080876, 0.000089, 0.657336, -0.192840, 0.000089, 1.114831, -0.192840, 0.000089, 1.070326, -0.080876, 0.000089, 1.114831, -0.192840, 0.000089, 1.352422, -0.312157, 0.000089, 1.070326, -0.080876, 0.000089, 0.415135, -0.312157, 0.000089, 0.593243, -0.312157, 0.000089, 0.657336, -0.192840, 0.000089, 1.181345, -0.312157, 0.000089, 1.352422, -0.312157, 0.000089, 1.114831, -0.192840, 0.000089, -0.808258, -0.312169, 0.000089, -0.663246, 0.267631, 0.000090, -0.808258, 0.310512, 0.000090, -0.663246, 0.267631, 0.000090, -0.521122, 0.310512, 0.000090, -0.808258, 0.310512, 0.000090, -0.663246, 0.267631, 0.000090, -0.264247, -0.156732, 0.000089, -0.521122, 0.310512, 0.000090, -0.264247, -0.156732, 0.000089, 0.133980, 0.267810, 0.000090, -0.008395, 0.310512, 0.000090, 0.133980, 0.267810, 0.000090, 0.276283, 0.310512, 0.000090, -0.008395, 0.310512, 0.000090, 0.133980, 0.267810, 0.000090, 0.276283, -0.312169, 0.000089, 0.276283, 0.310512, 0.000090, -0.264247, -0.156732, 0.000089, -0.199006, -0.312169, 0.000089, 0.133980, 0.267810, 0.000090, 0.122966, -0.312169, 0.000089, 0.276283, -0.312169, 0.000089, 0.133980, 0.267810, 0.000090, -0.808258, -0.312169, 0.000089, -0.657201, -0.312169, 0.000089, -0.663246, 0.267631, 0.000090, -0.335336, -0.312169, 0.000089, -0.264247, -0.156732, 0.000089, -0.663246, 0.267631, 0.000090, -0.335336, -0.312169, 0.000089, -0.199006, -0.312169, 0.000089, -0.264247, -0.156732, 0.000089, -1.115718, -0.312169, 0.000089, -0.957073, 0.310512, 0.000090, -1.115718, 0.310512, 0.000090, -1.115718, -0.312169, 0.000089, -0.957073, -0.312169, 0.000089, -0.957073, 0.310512, 0.000090, -2.087892, 0.288483, 0.000090, -2.136906, 0.303578, 0.000090, -2.192241, 0.175260, 0.000089, -2.136906, 0.303578, 0.000090, -2.661016, 0.301725, 0.000090, -2.557835, 0.195052, 0.000089, -2.234442, 0.193471, 0.000089, -2.136906, 0.303578, 0.000090, -2.557835, 0.195052, 0.000089, -2.661016, 0.301725, 0.000090, -2.728680, 0.276824, 0.000090, -2.619455, 0.166496, 0.000089, -2.728680, 0.276824, 0.000090, -2.753594, 0.258683, 0.000090, -2.630960, 0.153448, 0.000089, -2.661016, 0.301725, 0.000090, -2.619455, 0.166496, 0.000089, -2.603843, 0.178315, 0.000089, -2.753594, 0.258683, 0.000090, -2.768504, 0.242489, 0.000090, -2.630960, 0.153448, 0.000089, -2.768504, 0.242489, 0.000090, -2.784614, 0.216467, 0.000089, -2.638976, 0.139976, 0.000089, -2.784614, 0.216467, 0.000089, -2.803827, 0.148780, 0.000089, -2.638976, 0.139976, 0.000089, -2.803827, 0.148780, 0.000089, -2.806622, -0.114726, 0.000089, -2.652378, -0.064215, 0.000089, -2.647331, 0.113830, 0.000089, -2.803827, 0.148780, 0.000089, -2.652378, -0.064215, 0.000089, -2.806622, -0.114726, 0.000089, -2.788341, -0.208041, 0.000089, -2.642975, -0.119727, 0.000089, -2.788341, -0.208041, 0.000089, -2.776688, -0.233675, 0.000089, -2.635319, -0.140401, 0.000089, -2.642975, -0.119727, 0.000089, -2.788341, -0.208041, 0.000089, -2.635319, -0.140401, 0.000089, -2.776688, -0.233675, 0.000089, -2.755896, -0.260451, 0.000089, -2.625630, -0.156626, 0.000089, -2.755896, -0.260451, 0.000089, -2.734777, -0.277483, 0.000089, -2.625630, -0.156626, 0.000089, -2.776688, -0.233675, 0.000089, -2.625630, -0.156626, 0.000089, -2.635319, -0.140401, 0.000089, -2.734777, -0.277483, 0.000089, -2.694093, -0.296960, 0.000089, -2.625630, -0.156626, 0.000089, -2.694093, -0.296960, 0.000089, -2.642790, -0.308438, 0.000089, -2.609077, -0.172175, 0.000089, -2.609077, -0.172175, 0.000089, -2.642790, -0.308438, 0.000089, -2.595673, -0.179871, 0.000089, -2.642790, -0.308438, 0.000089, -2.140540, -0.307487, 0.000089, -2.256526, -0.195815, 0.000089, -2.140540, -0.307487, 0.000089, -2.094876, -0.297043, 0.000089, -2.188035, -0.170536, 0.000089, -2.256526, -0.195815, 0.000089, -2.140540, -0.307487, 0.000089, -2.206220, -0.181848, 0.000089, -2.094876, -0.297043, 0.000089, -2.058926, -0.279019, 0.000089, -2.174403, -0.156284, 0.000089, -2.058926, -0.279019, 0.000089, -2.029938, -0.250025, 0.000089, -2.174403, -0.156284, 0.000089, -2.094876, -0.297043, 0.000089, -2.174403, -0.156284, 0.000089, -2.188035, -0.170536, 0.000089, -2.029938, -0.250025, 0.000089, -2.021874, -0.235626, 0.000089, -2.174403, -0.156284, 0.000089, -2.021874, -0.235626, 0.000089, -2.010987, -0.198312, 0.000089, -2.174403, -0.156284, 0.000089, -2.010987, -0.198312, 0.000089, -2.005376, -0.105654, 0.000089, -2.165258, -0.139048, 0.000089, -2.005376, -0.105654, 0.000089, -2.158370, -0.105654, 0.000089, -2.165258, -0.139048, 0.000089, -2.768504, 0.242489, 0.000090, -2.638976, 0.139976, 0.000089, -2.630960, 0.153448, 0.000089, -2.803827, 0.148780, 0.000089, -2.647331, 0.113830, 0.000089, -2.638976, 0.139976, 0.000089, -2.136906, 0.303578, 0.000090, -2.234442, 0.193471, 0.000089, -2.204032, 0.182899, 0.000089, -2.051116, 0.261094, 0.000090, -2.069313, 0.277353, 0.000090, -2.182756, 0.166070, 0.000089, -2.069313, 0.277353, 0.000090, -2.087892, 0.288483, 0.000090, -2.182756, 0.166070, 0.000089, -2.182756, 0.166070, 0.000089, -2.087892, 0.288483, 0.000090, -2.192241, 0.175260, 0.000089, -2.025605, 0.212067, 0.000089, -2.038938, 0.243775, 0.000090, -2.175599, 0.155344, 0.000089, -2.038938, 0.243775, 0.000090, -2.051116, 0.261094, 0.000090, -2.182756, 0.166070, 0.000089, -2.165653, 0.121593, 0.000089, -2.014183, 0.121593, 0.000089, -2.025605, 0.212067, 0.000089, -2.175599, 0.155344, 0.000089, -2.165653, 0.121593, 0.000089, -2.025605, 0.212067, 0.000089, -2.038938, 0.243775, 0.000090, -2.182756, 0.166070, 0.000089, -2.175599, 0.155344, 0.000089, -2.642790, -0.308438, 0.000089, -2.256526, -0.195815, 0.000089, -2.561231, -0.191292, 0.000089, -2.010987, -0.198312, 0.000089, -2.165258, -0.139048, 0.000089, -2.174403, -0.156284, 0.000089, -2.188035, -0.170536, 0.000089, -2.206220, -0.181848, 0.000089, -2.140540, -0.307487, 0.000089, -2.204032, 0.182899, 0.000089, -2.192241, 0.175260, 0.000089, -2.136906, 0.303578, 0.000090, -2.642790, -0.308438, 0.000089, -2.561231, -0.191292, 0.000089, -2.595673, -0.179871, 0.000089, -2.557835, 0.195052, 0.000089, -2.661016, 0.301725, 0.000090, -2.583509, 0.188102, 0.000089, -2.583509, 0.188102, 0.000089, -2.661016, 0.301725, 0.000090, -2.603843, 0.178315, 0.000089, -2.694093, -0.296960, 0.000089, -2.609077, -0.172175, 0.000089, -2.625630, -0.156626, 0.000089, -2.619455, 0.166496, 0.000089, -2.728680, 0.276824, 0.000090, -2.630960, 0.153448, 0.000089,]);

const shaderSrc_vertex = "\nprecision mediump float;\n\nattribute vec3 vPos;\nattribute vec3 vNor;\n\nuniform vec3 color;\nuniform mat4 model;\nuniform mat4 view;\nuniform mat4 projection;\n\nvoid main(void) {\n\tgl_Position = projection * view * model * vec4(vPos, 1.0);\n}\n";

const shaderSrc_fragment = "\nprecision mediump float;\n\nuniform vec3 color;\n\nvoid main(void) {\n\tgl_FragColor = vec4(color, 1.0);\n}\n";

function buildShader(gl, vertexSource, fragmentSource, attributes, uniforms) {
	const out = {};
	const vertexShader = gl.createShader(gl.VERTEX_SHADER);
	if (!vertexShader)
		throw new Error('Could not create vertex shader.');
	gl.shaderSource(vertexShader, vertexSource);
	gl.compileShader(vertexShader);
	const vertCompiled = gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS);
	if (!vertCompiled)
		console.error(gl.getShaderInfoLog(vertexShader));
	const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
	if (!fragmentShader)
		throw new Error('Could not create fragment shader.');
	gl.shaderSource(fragmentShader, fragmentSource);
	gl.compileShader(fragmentShader);
	const fragCompiled = gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS);
	if (!fragCompiled)
		console.error(gl.getShaderInfoLog(fragmentShader));
	const prog = gl.createProgram();
	if (!prog)
		throw new Error('Could not create program.');
	out.program = prog;
	gl.attachShader(out.program, vertexShader);
	gl.attachShader(out.program, fragmentShader);
	gl.linkProgram(out.program);
	out.attributes = {};
	attributes.forEach(attr => {
		out.attributes[attr] = gl.getAttribLocation(out.program, attr);
	});
	out.uniforms = {};
	uniforms.forEach(uniform => {
		const ul = gl.getUniformLocation(out.program, uniform);
		if (!ul)
			throw new Error(`Could not find uniform location: ${uniform}.`);
		out.uniforms[uniform] = ul;
	});
	return out;
}
function mat4_multiply(out, a, b) {
    const a00 = a[0];
    const a01 = a[1];
    const a02 = a[2];
    const a03 = a[3];
    const a10 = a[4];
    const a11 = a[5];
    const a12 = a[6];
    const a13 = a[7];
    const a20 = a[8];
    const a21 = a[9];
    const a22 = a[10];
    const a23 = a[11];
    const a30 = a[12];
    const a31 = a[13];
    const a32 = a[14];
    const a33 = a[15];
    let b0 = b[0];
    let b1 = b[1];
    let b2 = b[2];
    let b3 = b[3];
    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = b[4];
    b1 = b[5];
    b2 = b[6];
    b3 = b[7];
    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = b[8];
    b1 = b[9];
    b2 = b[10];
    b3 = b[11];
    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = b[12];
    b1 = b[13];
    b2 = b[14];
    b3 = b[15];
    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    return out;
}
function mat4_ortho(out, left, right, bottom, top, near, far) {
	const lr = 1 / (left - right);
	const bt = 1 / (bottom - top);
	const nf = 1 / (near - far);
	out[0] = -2 * lr;
	out[1] = 0;
	out[2] = 0;
	out[3] = 0;
	out[4] = 0;
	out[5] = -2 * bt;
	out[6] = 0;
	out[7] = 0;
	out[8] = 0;
	out[9] = 0;
	out[10] = 2 * nf;
	out[11] = 0;
	out[12] = (left + right) * lr;
	out[13] = (top + bottom) * bt;
	out[14] = (far + near) * nf;
	out[15] = 1;
	return out;
}
;
function mat4_perspective(out, fovy, aspect, near, far) {
	const f = 1.0 / Math.tan(fovy / 2);
	const nf = 1 / (near - far);
	out[0] = f / aspect;
	out[1] = 0;
	out[2] = 0;
	out[3] = 0;
	out[4] = 0;
	out[5] = f;
	out[6] = 0;
	out[7] = 0;
	out[8] = 0;
	out[9] = 0;
	out[10] = (far + near) * nf;
	out[11] = -1;
	out[12] = 0;
	out[13] = 0;
	out[14] = (2 * far * near) * nf;
	out[15] = 0;
	return out;
}
function mat4_identity(out) {
	out[0] = 1;
	out[1] = 0;
	out[2] = 0;
	out[3] = 0;
	out[4] = 0;
	out[5] = 1;
	out[6] = 0;
	out[7] = 0;
	out[8] = 0;
	out[9] = 0;
	out[10] = 1;
	out[11] = 0;
	out[12] = 0;
	out[13] = 0;
	out[14] = 0;
	out[15] = 1;
	return out;
}
const EPSILON = 0.000001;
function mat4_lookAt(out, eye, center, up) {
    let x0;
    let x1;
    let x2;
    let y0;
    let y1;
    let y2;
    let z0;
    let z1;
    let z2;
    let len;
    const eyex = eye[0];
    const eyey = eye[1];
    const eyez = eye[2];
    const upx = up[0];
    const upy = up[1];
    const upz = up[2];
    const centerx = center[0];
    const centery = center[1];
    const centerz = center[2];
    if (Math.abs(eyex - centerx) < EPSILON &&
			Math.abs(eyey - centery) < EPSILON &&
			Math.abs(eyez - centerz) < EPSILON) {
			return mat4_identity(out);
	}
    z0 = eyex - centerx;
    z1 = eyey - centery;
    z2 = eyez - centerz;
    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
    z0 *= len;
    z1 *= len;
    z2 *= len;
    x0 = upy * z2 - upz * z1;
    x1 = upz * z0 - upx * z2;
    x2 = upx * z1 - upy * z0;
    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
    if (!len) {
		x0 = 0;
		x1 = 0;
		x2 = 0;
	}
	else {
		len = 1 / len;
		x0 *= len;
		x1 *= len;
		x2 *= len;
	}
    y0 = z1 * x2 - z2 * x1;
    y1 = z2 * x0 - z0 * x2;
    y2 = z0 * x1 - z1 * x0;
    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
    if (!len) {
		y0 = 0;
		y1 = 0;
		y2 = 0;
	}
	else {
		len = 1 / len;
		y0 *= len;
		y1 *= len;
		y2 *= len;
	}
    out[0] = x0;
    out[1] = y0;
    out[2] = z0;
    out[3] = 0;
    out[4] = x1;
    out[5] = y1;
    out[6] = z1;
    out[7] = 0;
    out[8] = x2;
    out[9] = y2;
    out[10] = z2;
    out[11] = 0;
    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
    out[15] = 1;
    return out;
}
function mat4_translate(out, a, v) {
    const x = v[0];
    const y = v[1];
    const z = v[2];
    let a00;
    let a01;
    let a02;
    let a03;
    let a10;
    let a11;
    let a12;
    let a13;
    let a20;
    let a21;
    let a22;
    let a23;
    if (a === out) {
		out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
		out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
		out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
		out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
	}
	else {
		a00 = a[0];
		a01 = a[1];
		a02 = a[2];
		a03 = a[3];
		a10 = a[4];
		a11 = a[5];
		a12 = a[6];
		a13 = a[7];
		a20 = a[8];
		a21 = a[9];
		a22 = a[10];
		a23 = a[11];
		out[0] = a00;
		out[1] = a01;
		out[2] = a02;
		out[3] = a03;
		out[4] = a10;
		out[5] = a11;
		out[6] = a12;
		out[7] = a13;
		out[8] = a20;
		out[9] = a21;
		out[10] = a22;
		out[11] = a23;
		out[12] = a00 * x + a10 * y + a20 * z + a[12];
		out[13] = a01 * x + a11 * y + a21 * z + a[13];
		out[14] = a02 * x + a12 * y + a22 * z + a[14];
		out[15] = a03 * x + a13 * y + a23 * z + a[15];
	}
    return out;
}
;
function mat4_scale(out, a, v) {
    const x = v[0];
    const y = v[1];
    const z = v[2];
    out[0] = a[0] * x;
    out[1] = a[1] * x;
    out[2] = a[2] * x;
    out[3] = a[3] * x;
    out[4] = a[4] * y;
    out[5] = a[5] * y;
    out[6] = a[6] * y;
    out[7] = a[7] * y;
    out[8] = a[8] * z;
    out[9] = a[9] * z;
    out[10] = a[10] * z;
    out[11] = a[11] * z;
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
}
function radians(a) {
	return a * Math.PI / 180;
}
function degrees(a) {
	return a * 180 / Math.PI;
}
function map(value, istart, istop, ostart, ostop) {
	return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
}
function easeOutElastic(n) {
    let s;
    let a = 0.1;
    const p = 0.4;
    if (n === 0)
			return 0;
    if (n === 1)
			return 1;
    if (!a || a < 1) {
			a = 1;
			s = p / 4;
	}
	else
			s = p * Math.asin(1 / a) / (2 * Math.PI);
    return (a * (2 * (-10 * n)) * Math.sin((n - s) * (2 * Math.PI) / p) + 1);
}
;
function handleLogoHover() {
	document.body.classList.add('hover');
}
function handleLogoUnhover() {
	document.body.classList.remove('hover');
}
const logoFallback = document.getElementById('logo');
if (!logoFallback)
		throw new Error('Logo not found.');
// logoFallback.addEventListener('mouseenter', handleLogoHover);
// logoFallback.addEventListener('mouseleave', handleLogoUnhover);
const canvas = document.getElementById('canvas');
if (!canvas)
		throw new Error('Canvas not found.');
const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
if (!gl)
		throw new Error('Unable to initialize WebGL.');
canvas.style.display = 'inline-block';
// logoFallback.removeEventListener('mouseenter', handleLogoHover);
// logoFallback.removeEventListener('mouseleave', handleLogoUnhover);
if (logoFallback)
		logoFallback.style.display = 'none';

let requestAnimationFrameHandle;

let shader;
{
		gl.clearColor(0, 0, 0, 0);
		gl.disable(gl.DEPTH_TEST);
		gl.disable(gl.BLEND);
		gl.cullFace(gl.BACK);
		gl.enable(gl.CULL_FACE);
		shader = buildShader(gl, shaderSrc_vertex, shaderSrc_fragment, ['vPos'], ['model', 'view', 'projection', 'color']);
		gl.useProgram(shader.program);
}
let text;
let extrusion;
{
	text = {};
	var vbo = gl.createBuffer();
	if (!vbo)
			throw new Error('Could not allocate buffer.');
	text.vbo = vbo;
	gl.bindBuffer(gl.ARRAY_BUFFER, text.vbo);
	gl.bufferData(gl.ARRAY_BUFFER, mesh_text, gl.STATIC_DRAW);
	text.verticesLen = mesh_text.length / 3;
}
{
	extrusion = {};
	var vbo = gl.createBuffer();
	if (!vbo)
			throw new Error('Could not allocate buffer.');
	extrusion.vbo = vbo;
	gl.bindBuffer(gl.ARRAY_BUFFER, extrusion.vbo);
	gl.bufferData(gl.ARRAY_BUFFER, mesh_extrusion, gl.STATIC_DRAW);
	extrusion.verticesLen = mesh_extrusion.length / 3;
}
let hovering = false;
const model_text = new Float32Array(16);
const model_extrusion = new Float32Array(16);
const view = new Float32Array(16);
const projection = new Float32Array(16);
const modelWidth = 5.686;
const modelHeight = 0.697;
const modelShearBuffer = 1;
let curShearX = -0.75;
let curShearY = 0.75;
let desiredShearX = -0.75;
let desiredShearY = 0.75;
const modelAnimationDuration = 30;
let modelAnimationFrames = 0;
let modelAnimationTarget = 1;
let modelAnimationState = 1;
let modelAnimationOriginalState = modelAnimationState;
mat4_identity(model_text);
mat4_lookAt(view, [0, 0, 20], [0, 0, 0], [0, 1, 0]);
function handleCanvasResize() {
	const displayWidth = gl.canvas.clientWidth;
	const ar = 2;
	const x = modelWidth + modelShearBuffer;
	const y = x / ar;
	mat4_ortho(projection, -x / 2, x / 2, -y / 2, y / 2, -100, 100);
	gl.canvas.width = displayWidth * window.devicePixelRatio || 1;
	gl.canvas.height = displayWidth / ar * window.devicePixelRatio || 1;
	gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
}
function applyShear(shearX, shearY) {
	mat4_identity(model_extrusion);
	const sx = shearX * 2;
	const sy = shearY * 2;
	model_extrusion[8] = sx;
	model_extrusion[9] = sy;
	mat4_lookAt(view, [sx * 5, sy * 5, 20], [0, 0, 0], [0, 1, 0]);
}
function setHoverState(show) {
	if (show && !hovering) {
		document.body.classList.add('hover');
		hovering = true;
		modelAnimationFrames = modelAnimationDuration;
		modelAnimationTarget = 1.05;
		modelAnimationOriginalState = modelAnimationState;
	}
	if (!show && hovering) {
		document.body.classList.remove('hover');
		hovering = false;
		modelAnimationFrames = modelAnimationDuration;
		modelAnimationTarget = 1;
		modelAnimationOriginalState = modelAnimationState;
	}
}
function handleMouseMove(e) {
	desiredShearX = map(e.clientX, 0, window.innerWidth, 1, -1);
	desiredShearY = map(e.clientY, 0, window.innerHeight, -1, 1);
	const br = canvas.getBoundingClientRect();
	const hovering = (e.clientX >= br.left + br.width * 0.08 &&
			e.clientX <= br.right - br.width * 0.08 &&
			e.clientY >= br.top + br.height * 0.4 &&
			e.clientY <= br.bottom - br.height * 0.4);
	//setHoverState(hovering);
}
window.addEventListener('mousemove', handleMouseMove);
function handleClick() {
	modelAnimationFrames = modelAnimationDuration;
	modelAnimationTarget = 1.1;
	modelAnimationOriginalState = modelAnimationState;
	//toggleVideoOverlay();
}
canvas.addEventListener('click', handleClick);
const mobilePlayButton = document.getElementById('playContainer');
if (mobilePlayButton)
		mobilePlayButton.addEventListener('click', handleClick);
const globe = document.getElementById('globe');
if (globe)
		globe.addEventListener('click', handleClick);
const motionBufferSize = 8;
let motionBufferCursor = 0;
const motionXBuffer = new Float32Array(motionBufferSize);
const motionYBuffer = new Float32Array(motionBufferSize);
function handleAccelerometerMotion(e) {
	motionXBuffer[motionBufferCursor] = e.dm.gx;
	motionYBuffer[motionBufferCursor] = e.dm.gy;
	motionBufferCursor++;
	motionBufferCursor %= motionBufferSize;
	let xAvg = 0;
	for (var i = 0; i < motionBufferSize; i++)
			xAvg += motionXBuffer[i];
	xAvg /= motionBufferSize;
	let yAvg = 0;
	for (var i = 0; i < motionBufferSize; i++)
			yAvg += motionYBuffer[i];
	yAvg /= motionBufferSize;
	yAvg += 9.8 / 2;
	desiredShearX = -xAvg / 4.6;
	desiredShearY = -yAvg / 9.8;
	curShearX = desiredShearX;
	curShearY = desiredShearY;
}
function deviceMotionCapabilityDetection(e) {
	console.log(e)
	if (e.accelerationIncludingGravity && e.accelerationIncludingGravity.x != null) {
		var gn_1 = new GyroNorm({
			frequency: 60,
			decimalCount: 8,
		});
		gn_1.init().then(function () {
			gn_1.start(handleAccelerometerMotion);
		}).catch(function (e) {
			console.error(e);
		});
		window.removeEventListener('mousemove', handleMouseMove);
	}
	window.removeEventListener('devicemotion', deviceMotionCapabilityDetection);
}

window.addEventListener('devicemotion', deviceMotionCapabilityDetection);
window.addEventListener('resize', handleCanvasResize);
handleCanvasResize();
requestAnimationFrameHandle = requestAnimationFrame(render);
function render() {
	if (modelAnimationFrames > 0) {
		modelAnimationState = map(easeOutElastic((modelAnimationDuration - modelAnimationFrames) / modelAnimationDuration), 0, 1, modelAnimationOriginalState, modelAnimationTarget);
		mat4_identity(model_text);
		mat4_scale(model_text, model_text, [modelAnimationState, modelAnimationState, modelAnimationState]);
		modelAnimationFrames--;
	}
	if (curShearX != desiredShearX) {
		var diff = desiredShearX - curShearX;
		curShearX += diff / 5;
	}
	if (curShearY != desiredShearY) {
		var diff = desiredShearY - curShearY;
		curShearY += diff / 5;
	}
	applyShear(curShearX, curShearY);
	gl.clear(gl.COLOR_BUFFER_BIT);
	gl.uniformMatrix4fv(shader.uniforms['view'], false, view);
	gl.uniformMatrix4fv(shader.uniforms['projection'], false, projection);
	{
		gl.bindBuffer(gl.ARRAY_BUFFER, extrusion.vbo);
		gl.vertexAttribPointer(shader.attributes['vPos'], 3, gl.FLOAT, false, 12, 0);
		gl.enableVertexAttribArray(shader.attributes['vPos']);
		gl.uniform3f(shader.uniforms['color'], 0, 0, 0);
		gl.uniformMatrix4fv(shader.uniforms['model'], false, model_text);
		gl.drawArrays(gl.TRIANGLES, 0, extrusion.verticesLen);
	}
	{
		gl.bindBuffer(gl.ARRAY_BUFFER, text.vbo);
		gl.vertexAttribPointer(shader.attributes['vPos'], 3, gl.FLOAT, false, 12, 0);
		gl.enableVertexAttribArray(shader.attributes['vPos']);
		gl.uniform3f(shader.uniforms['color'], 1, 1, 1);
		gl.uniformMatrix4fv(shader.uniforms['model'], false, model_text);
		gl.drawArrays(gl.TRIANGLES, 0, text.verticesLen);
	}
	requestAnimationFrameHandle = requestAnimationFrame(render);
}


// WEBPACK FOOTER //
// ./src/assets/js/lib/logo.js